package com.tlc.common;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.util.Locale;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

public final class LongConverter {
	private static final Log log = LogFactory.getLog(LongConverter.class);
	private DecimalFormat format;
	private int scale;
	
	public LongConverter(String format, int scale){
		this.format = new DecimalFormat(format);
		this.format.setParseBigDecimal(true);
		this.scale = scale;
	}
	
	public LongConverter(String format, int scale, char decimalseparator, char groupseparator){
		DecimalFormatSymbols symbols = DecimalFormatSymbols.getInstance(Locale.getDefault());
		symbols.setDecimalSeparator(decimalseparator);
		symbols.setGroupingSeparator(groupseparator);
		this.format = new DecimalFormat(format,symbols);
		this.format.setParseBigDecimal(true);
		this.scale = scale;
	}
	
	public long toLong(String value) throws ParseException{
		try{
			if(StringUtil.isNullOrEmpty(value)) return 0l;
			BigDecimal num = (BigDecimal)this.format.parse(value);
			return num.setScale(scale, BigDecimal.ROUND_HALF_EVEN).unscaledValue().longValue();
		}catch(ParseException e){
			log.error("value=" + value,e);
			throw e;
		}
	}
	
	public String toString(long value){
		return format.format(BigDecimal.valueOf(value, scale));
	}
	
	public long divide(long dividend , long divisor){
		return new BigDecimal(dividend).divide(new BigDecimal(divisor), 0, BigDecimal.ROUND_HALF_EVEN).longValueExact();
	}
	
}
