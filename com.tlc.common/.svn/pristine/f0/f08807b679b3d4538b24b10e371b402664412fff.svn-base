package com.tlc.common;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map.Entry;

import javax.xml.soap.MessageFactory;
import javax.xml.soap.MimeHeaders;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPMessage;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.InputStreamEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

public class HttpUtil {
	
	public static byte[] httpPostXml(String url, HashMap<String, String> headers, byte[] data) throws ClientProtocolException, IOException{
        HttpClient httpclient = new DefaultHttpClient();
		HttpPost req = new HttpPost(url);
		
		for(Entry<String,String> entry : headers.entrySet()){
			req.addHeader(entry.getKey(), entry.getValue());
		}
		
		InputStreamEntity reqEntity = new InputStreamEntity(new ByteArrayInputStream(data), data.length);
        reqEntity.setContentType("text/xml; charset=utf-8");
        reqEntity.setChunked(true);
        
        req.setEntity(reqEntity);
		
		HttpResponse res = httpclient.execute(req);
		HttpEntity resEntity = res.getEntity();
		
		return EntityUtils.toByteArray(resEntity);
	}
	
	public static byte[] sendSoap(String url, String action, byte[] data){
		ByteArrayInputStream instream = null;
		ByteArrayOutputStream outstream = null;
		try{
			MimeHeaders header = new MimeHeaders();
			header.addHeader("SOAPAction",action);
	        SOAPMessage rp = sendSoap(url,MessageFactory.newInstance().createMessage(header, new ByteArrayInputStream(data)));
			outstream = new ByteArrayOutputStream();
			rp.writeTo(outstream);
			return outstream.toByteArray();
		}catch(Exception e){
			Logger.LogServer(e);
		}finally{
			if(outstream != null)try {outstream.close();} catch (Exception e) {}
			if(instream != null)try {instream.close();} catch (Exception e) {}
		}
		return null;
	}

	public static SOAPMessage sendSoap(String url, SOAPMessage message){
		SOAPConnection conn = null;
		try{
			conn = SOAPConnectionFactory.newInstance().createConnection();
			return conn.call(message,url);
		}catch(Exception e){
			Logger.LogServer(e);
		}finally{
			if(conn != null)try {conn.close();} catch (Exception e) {}
		}
		return null;
	}
	
}
