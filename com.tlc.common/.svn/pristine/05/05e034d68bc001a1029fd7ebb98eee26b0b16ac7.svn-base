package com.tlc.common;

import java.text.DecimalFormat;
import com.tlc.regex.NamedMatcher;
import com.tlc.regex.NamedPattern;

public class LongUtil{
	public static long divide(long dividend , long divisor){
		long quotient  = dividend / divisor;
		long rounder   = 2 * (dividend % divisor) + Long.signum(quotient) * divisor;
		divisor        = 2 * divisor;
		return quotient + (rounder % divisor == 0 ? (quotient % 2) : rounder/divisor);
	}
	
	public static long divideRoundHalfUp(long dividend , long divisor){
		return (2 * dividend + Long.signum(dividend) * Long.signum(divisor) * divisor) / (2 * divisor);
	}
	
	public static boolean even(long number){
		return (number % 2) == 0;
	}
	
	public static boolean odd(long number){
		return (number % 2) == 1;
	}
	
	private static NamedPattern decimalPattern = NamedPattern.compile("^((?<sign>\\-)|(\\+))?(?<whole>\\d*)\\.?(?<decimal>\\d{1,2})?\\d*");
	public static long toLong(String value){
		try{
			NamedMatcher syntax = decimalPattern.matcher(value);
			long sign   = 1;
			long amount = 0;
			if(!syntax.matches()) return amount;
			String match = syntax.group("sign");
			if(!StringUtil.isNullOrEmpty(match)){
				sign = new Long(syntax.group("sign") + "1");
			}
			match = syntax.group("whole");
			if(!StringUtil.isNullOrEmpty(match)){
				amount = new Long(match);
			}
			if("YES".equalsIgnoreCase(SystemInfo.getProperty(SystemInfo.PROP_ACCEPT_DECIMAL))){
				amount = amount * 100;
				match = syntax.group("decimal");
				if(!StringUtil.isNullOrEmpty(match)){
					long decimal = new Long(match + (match.length() == 1 ? "0" : ""));
					amount = amount + decimal;
				}
			}
			return sign * amount;
		}catch(Exception e){
			Logger.LogServer(e);
		}
		return 0l;
	}
	public static String toString(long longValue){
		String value;
		if("YES".equalsIgnoreCase(SystemInfo.getProperty(SystemInfo.PROP_ACCEPT_DECIMAL))){
			DecimalFormat formatter = new DecimalFormat("00");
			value = String.valueOf(longValue / 100l) + "." + formatter.format(longValue % 100l);
		}else{
			value = String.valueOf(longValue);
		}
		return value;
	}
	public static long abs(long value){
		return ((value < 0L) ? -value : value);
	}
}
